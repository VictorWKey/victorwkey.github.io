---
const {title, desc, technologies, img, webSite, repository, videoUrl, category, images} = Astro.props;

// Check if we have multiple images for modal
const hasMultipleImages = images && images.length > 1;
const hasImages = images && images.length > 0;

// Determine which buttons to show
const hasRepository = repository && repository !== "#";
const hasWebSite = webSite && webSite !== "#";
const hasVideo = videoUrl && videoUrl !== "#";
const hasAnyLink = hasRepository || hasWebSite || hasVideo || hasImages;
---

<div class="bg-white/10 backdrop-blur-sm border border-white/20 rounded-2xl p-6 h-full flex flex-col hover:bg-white/15 transition-all duration-300 cursor-pointer" onclick={`handleCardClick('${title}', '${videoUrl || ''}', '${webSite || ''}', ${hasImages ? `'${JSON.stringify(images).replace(/'/g, "\\'")}'` : 'null'})`}>
  <!-- Category Badge -->
  <div class="mb-4">
    <span class="inline-block px-3 py-1 text-xs font-semibold text-primary bg-primary/20 rounded-full">
      {category}
    </span>
  </div>

  <!-- Project Image -->
  <figure class="w-full h-48 rounded-xl overflow-hidden mb-4 bg-gray-800/50">
    <img class="w-full h-full object-cover" src={img} alt={title}>
  </figure>

  <!-- Content -->
  <div class="flex-1 flex flex-col">
    <h3 class="text-xl font-bold text-white mb-3">{title}</h3>
    <p class="text-gray-300 text-sm leading-relaxed mb-4 flex-1">{desc}</p>
    
    <!-- Technologies -->
    <div class="h-20 flex flex-wrap gap-2 mb-6 overflow-visible">
      {technologies.map((tech: any) => {
        const TechComponent = tech.logo;
        return (
          <div 
            class="flex items-center gap-2 bg-white/10 rounded-lg px-3 py-2 hover:bg-white/20 transition-all duration-200 group relative h-fit select-none"
            style="cursor: default !important;"
          >
            <div class="size-4 group-hover:scale-110 transition-transform duration-200">
              <TechComponent/>
            </div>
            <!-- Professional Instant Tooltip -->
            <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-3 px-3 py-2 bg-slate-900 text-white text-xs font-medium rounded-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-150 pointer-events-none whitespace-nowrap z-[100] shadow-xl border border-slate-700">
              <span class="text-white">{tech.name}</span>
              <!-- Arrow -->
              <div class="absolute top-full left-1/2 transform -translate-x-1/2 -mt-px">
                <div class="w-0 h-0 border-l-[5px] border-r-[5px] border-t-[5px] border-l-transparent border-r-transparent border-t-slate-900"></div>
              </div>
            </div>
          </div>
        );
      })}
    </div>

    <!-- Action Buttons -->
    {hasAnyLink && (
      <div class="flex gap-3">
        {hasRepository && (
          <a 
            href={repository} 
            class={`${hasWebSite || hasVideo || hasImages ? 'flex-1' : 'w-full'} py-2.5 px-4 bg-white/10 hover:bg-white/20 text-white rounded-lg text-sm font-medium transition-all duration-200 text-center border border-white/20 hover:border-white/40`}
            target="_blank" 
            rel="noopener"
          >
            <span class="flex items-center justify-center gap-2">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clip-rule="evenodd"></path>
              </svg>
              Repository
            </span>
          </a>
        )}
        
        {hasWebSite && (
          <a 
            href={webSite} 
            class={`${hasRepository || hasVideo || hasImages ? 'flex-1' : 'w-full'} py-2.5 px-4 bg-primary hover:bg-primary/80 text-white rounded-lg text-sm font-medium transition-all duration-200 text-center`}
            target="_blank" 
            rel="noopener"
          >
            <span class="flex items-center justify-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
              Live Demo
            </span>
          </a>
        )}
        
        {hasVideo && (
          <a 
            href={videoUrl} 
            class={`${hasRepository || hasWebSite || hasImages ? 'flex-1' : 'w-full'} py-2.5 px-4 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm font-medium transition-all duration-200 text-center`}
            target="_blank" 
            rel="noopener"
          >
            <span class="flex items-center justify-center gap-2">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z"></path>
              </svg>
              Watch Video
            </span>
          </a>
        )}
        
        {hasImages && (
          <button 
            onclick={`openProjectModal('${title}', ${JSON.stringify(images)})`}
            class={`${hasRepository || hasWebSite || hasVideo ? 'flex-1' : 'w-full'} py-2.5 px-4 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm font-medium transition-all duration-200 text-center`}
          >
            <span class="flex items-center justify-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2v12a2 2 0 002 2z"></path>
              </svg>
              View Images
            </span>
          </button>
        )}
      </div>
    )}

    {!hasAnyLink && (
      <div class="py-2.5 px-4 bg-gray-600/50 text-gray-400 rounded-lg text-sm font-medium text-center cursor-not-allowed">
        <span class="flex items-center justify-center gap-2">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"></path>
          </svg>
          Private Project
        </span>
      </div>
    )}
  </div>
</div>

<script define:vars={{ title, videoUrl, webSite, hasImages, images }}>
  // Handle card click with priority: video > demo > images
  window.handleCardClick = function(projectTitle, video, demo, projectImages) {
    // Priority order: video > demo > images
    if (video && video !== '#' && video !== '') {
      window.open(video, '_blank');
    } else if (demo && demo !== '#' && demo !== '') {
      window.open(demo, '_blank');
    } else if (projectImages && projectImages !== 'null') {
      try {
        const parsedImages = JSON.parse(projectImages);
        if (window.openProjectModal) {
          window.openProjectModal(projectTitle, parsedImages);
        }
      } catch (e) {
        console.log('No images available for this project');
      }
    }
  };

  // Prevent card click when clicking on buttons
  document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('a[href], button[onclick]');
    buttons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    });
  });
</script>

